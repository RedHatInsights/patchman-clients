openapi: 3.0.0
info:
  description: The API for Role Based Access Control.
  license:
    name: AGPL-3.0
    url: https://opensource.org/licenses/AGPL-3.0
  title: Role Based Access Control
  version: 1.0.0
servers:
- url: /api/rbac/v1
security:
- basic_auth: []
tags:
- description: Operations about principals
  name: Principal
- description: Operations about groups
  name: Group
- description: Operations about roles
  name: Role
- description: Operations about policies
  name: Policy
- description: Operations about access
  name: Access
- description: Operations about status
  name: Status
- description: Operations about cross account requests
  name: CrossAccountRequest
paths:
  /cross-account-requests/:
    get:
      description: By default, responses are sorted in ascending order by created_at
      operationId: listCrossAccountRequests
      parameters:
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Parameter for filtering resource by either a user's ID, or a
          client's account number. The default value is target_account.
        explode: true
        in: query
        name: query_by
        required: false
        schema:
          enum:
          - user_id
          - target_account
          type: string
        style: form
      - description: Parameter for filtering resource by an account number. Value
          can be a comma-separated list of ids. To be used in tandem with ?query_by=user_id
          to further filter a user's requests by account number.
        explode: true
        in: query
        name: account
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for filtering resource which have been approved.
        explode: true
        in: query
        name: approved_only
        required: false
        schema:
          enum:
          - "true"
          type: string
        style: form
      - description: Parameter for filtering resource based on status.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - pending
          - approved
          - denied
          - cancelled
          - expired
          type: string
        style: form
      - description: Parameter for ordering by field. For inverse ordering, use '-',
          e.g. ?order_by=-start_date.
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          enum:
          - request_id
          - start_date
          - end_date
          - created
          - modified
          - status
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossAccountRequestPagination'
          description: A paginated list of cross account request objects
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to list cross account requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: List the cross account requests for a user or account
      tags:
      - CrossAccountRequest
    post:
      operationId: createCrossAccountRequests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrossAccountRequestIn'
        description: CrossAccountRequest to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossAccountRequestOut'
          description: An object describing the cross account request
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to create cross account request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Create a cross account request
      tags:
      - CrossAccountRequest
  /cross-account-requests/{uuid}/:
    get:
      operationId: getCrossAccountRequest
      parameters:
      - description: ID of cross account request to get
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Parameter for filtering resource by either a user's ID, or a
          client's account number. The default value is target_account.
        explode: true
        in: query
        name: query_by
        required: false
        schema:
          enum:
          - user_id
          - target_account
          type: string
        style: form
      - description: Parameter for filtering resource by an account number. Value
          can be a comma-separated list of ids. To be used in tandem with ?query_by=user_id
          to further filter a user's requests by account number.
        explode: true
        in: query
        name: account
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for filtering resource which have been approved.
        explode: true
        in: query
        name: approved_only
        required: false
        schema:
          enum:
          - "true"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossAccountRequestDetail'
          description: A cross account request object
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to get group
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Get a cross account request
      tags:
      - CrossAccountRequest
    patch:
      description: Update a cross account request
      operationId: patchCrossAccountRequest
      parameters:
      - description: ID of cross account request to get
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrossAccountRequestPatch'
        description: Updates to CrossAccountRequest
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossAccountRequestDetail'
          description: A cross account request object
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossAccountRequestOut'
          description: An object describing the cross account request
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to get group
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Update a cross account request
      tags:
      - CrossAccountRequest
    put:
      description: Update a cross account request
      operationId: putCrossAccountRequest
      parameters:
      - description: ID of cross account request to get
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrossAccountRequestUpdateIn'
        description: Updates to CrossAccountRequest
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossAccountRequestDetail'
          description: A cross account request object
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossAccountRequestOut'
          description: An object describing the cross account request
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to get group
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Update a cross account request
      tags:
      - CrossAccountRequest
  /status/:
    get:
      operationId: getStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: An object describing the server status
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Obtain server status
      tags:
      - Status
  /principals/:
    get:
      description: By default, responses are sorted in ascending order by username
      operationId: listPrincipals
      parameters:
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Parameter for specifying the matching criteria for an object's
          name or email.
        explode: true
        in: query
        name: match_criteria
        required: false
        schema:
          default: exact
          enum:
          - partial
          - exact
          type: string
        style: form
      - description: Comma separated usernames of principals to get. If match_criteria
          is specified, only the first username will be picked up for search.
        explode: true
        in: query
        name: usernames
        required: false
        schema:
          example: userA,userB
          type: string
        style: form
      - description: The sort order of the query, either ascending or descending.
          Defaults to ascending.
        explode: true
        in: query
        name: sort_order
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: E-mail address of principal to search for. Could be combined
          with match_criteria for searching.
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - description: 'Set the status of users to get back. Could not be used with:
          usernames, email, admin_only'
        explode: true
        in: query
        name: status
        required: false
        schema:
          default: enabled
          enum:
          - enabled
          - disabled
          - all
          type: string
        style: form
      - description: 'Get only admin users within an account. Setting this would ignore
          the parameters: usernames, email'
        explode: true
        in: query
        name: admin_only
        required: false
        schema:
          default: "false"
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - description: 'Parameter for ordering principals by value. For inverse ordering,
          supply ''-'' before the param value, such as: ?order_by=-username'
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          enum:
          - username
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrincipalPagination'
          description: A paginated list of principals
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to list principals
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: List the principals for a tenant
      tags:
      - Principal
  /groups/:
    get:
      description: By default, responses are sorted in ascending order by group name
      operationId: listGroups
      parameters:
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Parameter for filtering resource by name using string contains
          search.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for specifying the matching criteria for an object's
          name or display_name.
        explode: true
        in: query
        name: name_match
        required: false
        schema:
          enum:
          - partial
          - exact
          type: string
        style: form
      - description: Parameter for filtering resource by scope.
        explode: true
        in: query
        name: scope
        required: false
        schema:
          default: account
          enum:
          - account
          - principal
          type: string
        style: form
      - description: A username for a principal to filter for groups
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: A list of UUIDs to filter listed groups.
        explode: false
        in: query
        name: uuid
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: List of role name to filter for groups. It is exact match but
          case-insensitive
        explode: false
        in: query
        name: role_names
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Discriminator that works with role_names to indicate matching
          all/any of the role names
        explode: true
        in: query
        name: role_discriminator
        required: false
        schema:
          enum:
          - all
          - any
          type: string
        style: form
      - description: 'Parameter for ordering groups by value. For inverse ordering,
          supply ''-'' before the param value, such as: ?order_by=-name'
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          enum:
          - name
          - modified
          - principalCount
          - policyCount
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPagination'
          description: A paginated list of group objects
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to list groups
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: List the groups for a tenant
      tags:
      - Group
    post:
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: Group to create in tenant
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupOut'
          description: An object describing the group
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to create group
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Create a group in a tenant
      tags:
      - Group
  /groups/{uuid}/:
    delete:
      operationId: deleteGroup
      parameters:
      - description: ID of group to delete
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Group deleted
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to delete group
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Delete a group in the tenant
      tags:
      - Group
    get:
      operationId: getGroup
      parameters:
      - description: ID of group to get
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupWithPrincipalsAndRoles'
          description: A Group object
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to get group
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Get a group in the tenant
      tags:
      - Group
    put:
      operationId: updateGroup
      parameters:
      - description: ID of group to update
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: Group to update in tenant
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupOut'
          description: Group updated
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to update group
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Udate a group in the tenant
      tags:
      - Group
  /groups/{uuid}/principals/:
    delete:
      operationId: deletePrincipalFromGroup
      parameters:
      - description: ID of group to update
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: A comma separated list of usernames for principals to remove
          from the group
        explode: true
        in: query
        name: usernames
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: Principals removed from group
        "400":
          description: Bad Input
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to remove principals from group
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Remove a principal from a group in the tenant
      tags:
      - Group
    get:
      description: By default, responses are sorted in ascending order by username
      operationId: getPrincipalsFromGroup
      parameters:
      - description: ID of group from which to get principals
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Parameter for filtering group principals by principal `username`
          using string contains search.
        explode: true
        in: query
        name: principal_username
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: 'Parameter for ordering principals by value. For inverse ordering,
          supply ''-'' before the param value, such as: ?order_by=-username'
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          enum:
          - username
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrincipalPagination'
          description: List of principals attached to group
        "400":
          description: Bad Input
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Get a list of principals from a group in the tenant
      tags:
      - Group
    post:
      operationId: addPrincipalToGroup
      parameters:
      - description: ID of group to update
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/GroupPrincipalIn'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupWithPrincipalsAndRoles'
          description: Group updated
        "400":
          description: Bad Input
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to update principals in group
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Add a principal to a group in the tenant
      tags:
      - Group
  /groups/{uuid}/roles/:
    delete:
      operationId: deleteRoleFromGroup
      parameters:
      - description: ID of group to update
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: A comma separated list of role UUIDs for roles to remove from
          the group
        explode: true
        in: query
        name: roles
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: Roles removed from group
        "400":
          description: Bad Input
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to remove roles from group
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Remove a role from a group in the tenant
      tags:
      - Group
    get:
      description: By default, responses are sorted in ascending order by role name
      operationId: listRolesForGroup
      parameters:
      - description: ID of group
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: If this is set to true, the result would be roles excluding the
          ones in the group
        explode: true
        in: query
        name: exclude
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Parameter for filtering group roles by role `name` using string
          contains search.
        explode: true
        in: query
        name: role_name
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for filtering group roles by role `display_name` using
          string contains search.
        explode: true
        in: query
        name: role_display_name
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for filtering group roles by role `description` using
          string contains search.
        explode: true
        in: query
        name: role_description
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for filtering group roles by system flag.
        explode: true
        in: query
        name: role_system
        required: false
        schema:
          type: boolean
        style: form
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: 'Parameter for ordering roles by value. For inverse ordering,
          supply ''-'' before the param value, such as: ?order_by=-name'
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          enum:
          - name
          - display_name
          - modified
          - policyCount
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupRolesPagination'
          description: A list of roles for a group
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to list roles for group
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: List the roles for a group in the tenant
      tags:
      - Group
    post:
      operationId: addRoleToGroup
      parameters:
      - description: ID of group to update
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/GroupRoleIn'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Group updated
        "400":
          description: Bad Input
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to update roles for group
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Add a role to a group in the tenant
      tags:
      - Group
  /roles/:
    get:
      description: By default, responses are sorted in ascending order by role name
      operationId: listRoles
      parameters:
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Parameter for filtering resource by name using string contains
          search.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for filtering resource by system flag.
        explode: true
        in: query
        name: system
        required: false
        schema:
          type: boolean
        style: form
      - description: Parameter for filtering resource by display_name using string
          contains search.
        explode: true
        in: query
        name: display_name
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for specifying the matching criteria for an object's
          name or display_name.
        explode: true
        in: query
        name: name_match
        required: false
        schema:
          enum:
          - partial
          - exact
          type: string
        style: form
      - description: Parameter for filtering resource by scope.
        explode: true
        in: query
        name: scope
        required: false
        schema:
          default: account
          enum:
          - account
          - principal
          type: string
        style: form
      - description: 'Parameter for ordering roles by value. For inverse ordering,
          supply ''-'' before the param value, such as: ?order_by=-name'
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          enum:
          - name
          - display_name
          - modified
          - policyCount
          type: string
        style: form
      - description: Parameter for add list of fields to display for roles.
        explode: false
        in: query
        name: add_fields
        required: false
        schema:
          items:
            enum:
            - groups_in
            - groups_in_count
            type: string
          type: array
        style: form
      - description: Unique username of the principal to obtain roles for (only available
          for admins, and if supplied, takes precedence over the identity header).
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: The application name(s) to filter roles by, from permissions.
          This is an exact match. You may also use a comma-separated list to match
          on multiple applications.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
      - description: The permission(s) to filter roles by. This is an exact match.
          You may also use a comma-separated list to match on multiple permissions.
        explode: true
        in: query
        name: permission
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolePaginationDynamic'
          description: A paginated list of role objects
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to list roles
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: List the roles for a tenant
      tags:
      - Role
    post:
      operationId: createRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleIn'
        description: Role to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleWithAccess'
          description: An object describing the role
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to create role
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Create a roles for a tenant
      tags:
      - Role
  /roles/{uuid}/:
    delete:
      operationId: deleteRole
      parameters:
      - description: ID of role to delete
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Role deleted
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to delete role
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Delete a role in the tenant
      tags:
      - Role
    get:
      operationId: getRole
      parameters:
      - description: ID of role to get
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Parameter for filtering resource by scope.
        explode: true
        in: query
        name: scope
        required: false
        schema:
          default: account
          enum:
          - account
          - principal
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleWithAccess'
          description: A Role object
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to get role
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Get a role in the tenant
      tags:
      - Role
    patch:
      operationId: patchRole
      parameters:
      - description: ID of role to update
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePatch'
        description: Patch to a Role
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleWithAccess'
          description: Role patched
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to patch role
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Patch a Role in the tenant
      tags:
      - Role
    put:
      operationId: updateRole
      parameters:
      - description: ID of role to update
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleWithAccess'
        description: Update to a Role
        required: true
      responses:
        "200":
          description: Role updated
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to update role
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Update a Role in the tenant
      tags:
      - Role
  /roles/{uuid}/access/:
    get:
      operationId: getRoleAccess
      parameters:
      - description: ID of the role
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPagination'
          description: A paginated list of the access objects for a role
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to get access for role
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Get access for a role in the tenant
      tags:
      - Role
  /policies/:
    get:
      description: By default, responses are sorted in ascending order by policy name
      operationId: listPolicies
      parameters:
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Parameter for filtering resource by name using string contains
          search.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for filtering resource by scope.
        explode: true
        in: query
        name: scope
        required: false
        schema:
          default: account
          enum:
          - account
          - principal
          type: string
        style: form
      - description: Parameter for filtering resource by group name using string contains
          search.
        explode: true
        in: query
        name: group_name
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for filtering resource by group uuid using UUID exact
          match.
        explode: true
        in: query
        name: group_uuid
        required: false
        schema:
          format: uuid
          type: string
        style: form
      - description: 'Parameter for ordering policies by value. For inverse ordering,
          supply ''-'' before the param value, such as: ?order_by=-name'
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          enum:
          - name
          - modified
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyPagination'
          description: A paginated list of policy objects
        "401":
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: List the policies in the tenant
      tags:
      - Policy
    post:
      operationId: createPolicies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyIn'
        description: Policy to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyExtended'
          description: An object describing the policy
        "401":
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Create a policy in a tenant
      tags:
      - Policy
  /policies/{uuid}/:
    delete:
      operationId: deletePolicy
      parameters:
      - description: ID of policy to delete
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Policy deleted
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Delete a policy in the tenant
      tags:
      - Policy
    get:
      operationId: getPolicy
      parameters:
      - description: ID of policy to get
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyExtended'
          description: A Policy object
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Get a policy in the tenant
      tags:
      - Policy
    put:
      operationId: updatePolicy
      parameters:
      - description: ID of policy to update
        explode: false
        in: path
        name: uuid
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyIn'
        description: Policy to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyExtended'
          description: A Policy object
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Update a policy in the tenant
      tags:
      - Policy
  /access/:
    get:
      description: Access responses are sorted in ascending order by an ID internal
        to the database
      operationId: getPrincipalAccess
      parameters:
      - description: The application name(s) to obtain access for the principal. This
          is an exact match. When no application is supplied, all permissions for
          the principal are returned. You may also use a comma-separated list to match
          on multiple applications.
        explode: true
        in: query
        name: application
        required: true
        schema:
          type: string
        style: form
      - description: Unique username of the principal to obtain access for (only available
          for admins, and if supplied, takes precedence over the identity header).
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessPagination'
          description: A paginated list of access objects
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: Get the permitted access for a principal in the tenant (defaults to
        principal from the identity header)
      tags:
      - Access
  /permissions/:
    get:
      description: By default, responses are sorted in ascending order by permission
        application.
      operationId: listPermissions
      parameters:
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: 'Parameter for ordering permissions by value. For inverse ordering,
          supply ''-'' before the param value, such as: ?order_by=-application'
        explode: true
        in: query
        name: order_by
        required: false
        schema:
          enum:
          - application
          - resource_type
          - verb
          - permission
          type: string
        style: form
      - description: Exact match for the application name of a permission. You may
          also use a comma-separated list to match on multiple applications.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
      - description: Exact match for the resource type name of a permission. You may
          also use a comma-separated list to match on multiple resource_types.
        explode: true
        in: query
        name: resource_type
        required: false
        schema:
          type: string
        style: form
      - description: Exact match for the operation verb name of a permission You may
          also use a comma-separated list to match on multiple verbs.
        explode: true
        in: query
        name: verb
        required: false
        schema:
          type: string
        style: form
      - description: Partial match for the aggregate permission value name of a permission
          object.
        explode: true
        in: query
        name: permission
        required: false
        schema:
          type: string
        style: form
      - description: If set to 'true', this will exclude any permission with a global
          allowance on either 'application', 'resource_type' or 'verb'. The default
          is 'false'.
        explode: true
        in: query
        name: exclude_globals
        required: false
        schema:
          default: "false"
          enum:
          - "true"
          - "false"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionPagination'
          description: A paginated list of permission objects
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to list permissions
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: List the permissions for a tenant
      tags:
      - Permission
  /permissions/options/:
    get:
      description: By default, options of application is returned. And could be resource_type
        or verb on demand.
      operationId: listPermissionOptions
      parameters:
      - description: Parameter for selecting the amount of data returned.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Parameter for selecting the offset of data.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: specify which fields of permission to display
        explode: true
        in: query
        name: field
        required: true
        schema:
          enum:
          - application
          - resource_type
          - verb
          type: string
        style: form
      - description: Filter returned options based on application. You may also use
          a comma-separated list to filter on multiple applications.
        explode: true
        in: query
        name: application
        required: false
        schema:
          type: string
        style: form
      - description: Filter returned options based on resource_type. You may also
          use a comma-separated list to filter on multiple resource_types.
        explode: true
        in: query
        name: resource_type
        required: false
        schema:
          type: string
        style: form
      - description: Filter returned options based on verb. You may also use a comma-separated
          list to filter on multiple verbs.
        explode: true
        in: query
        name: verb
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionOptionsPagination'
          description: A list of options for field of permission
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
          description: Insufficient permissions to list permissions
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected Error
      summary: List the available options for fields of permissions for a tenant
      tags:
      - Permission
components:
  parameters:
    QueryOffset:
      description: Parameter for selecting the offset of data.
      explode: true
      in: query
      name: offset
      required: false
      schema:
        default: 0
        minimum: 0
        type: integer
      style: form
    QueryLimit:
      description: Parameter for selecting the amount of data returned.
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 10
        maximum: 1000
        minimum: 1
        type: integer
      style: form
    NameFilter:
      description: Parameter for filtering resource by name using string contains
        search.
      explode: true
      in: query
      name: name
      required: false
      schema:
        type: string
      style: form
    SystemFilter:
      description: Parameter for filtering resource by system flag.
      explode: true
      in: query
      name: system
      required: false
      schema:
        type: boolean
      style: form
    GroupNameFilter:
      description: Parameter for filtering resource by group name using string contains
        search.
      explode: true
      in: query
      name: group_name
      required: false
      schema:
        type: string
      style: form
    GroupUUIDFilter:
      description: Parameter for filtering resource by group uuid using UUID exact
        match.
      explode: true
      in: query
      name: group_uuid
      required: false
      schema:
        format: uuid
        type: string
      style: form
    ScopeFilter:
      description: Parameter for filtering resource by scope.
      explode: true
      in: query
      name: scope
      required: false
      schema:
        default: account
        enum:
        - account
        - principal
        type: string
      style: form
    NameMatchCriteria:
      description: Parameter for specifying the matching criteria for an object's
        name or display_name.
      explode: true
      in: query
      name: name_match
      required: false
      schema:
        enum:
        - partial
        - exact
        type: string
      style: form
  requestBodies:
    GroupPrincipalIn:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupPrincipalIn'
      description: Principal to add to a group
      required: true
    GroupRoleIn:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupRoleIn'
      description: Role to add to a group
      required: true
  schemas:
    Error:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/Error_errors'
          type: array
      required:
      - errors
    Error403:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/Error403_errors'
          type: array
      required:
      - errors
    UUID:
      properties:
        uuid:
          example: 57e60f90-8c0c-4bd1-87a0-2143759aae1c
          format: uuid
          type: string
      required:
      - uuid
      type: object
    Timestamped:
      properties:
        created:
          example: 2019-01-21T17:32:28Z
          format: date-time
          type: string
        modified:
          example: 2019-03-04T07:25:58Z
          format: date-time
          type: string
      required:
      - created
      - modified
      type: object
    PaginationMeta:
      properties:
        count:
          example: 30
          format: int64
          type: integer
    PaginationLinks:
      properties:
        first:
          example: /api/v1/(resources)/?offset=0&limit=10
          format: uri
          type: string
        previous:
          example: /api/v1/(resources)/?offset=20&limit=10
          format: uri
          type: string
        next:
          example: /api/v1/(resources)/?offset=40&limit=10
          format: uri
          type: string
        last:
          example: /api/v1/(resources)/?offset=90&limit=10
          format: uri
          type: string
    ListPagination:
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        links:
          $ref: '#/components/schemas/PaginationLinks'
    Principal:
      properties:
        username:
          example: smithj
          type: string
        email:
          example: smithj@mytechco.com
          format: email
          type: string
        first_name:
          example: John
          type: string
        last_name:
          example: Smith
          type: string
        is_active:
          type: boolean
        is_org_admin:
          type: boolean
      required:
      - email
      - username
    PrincipalIn:
      example:
        username: smithj
      properties:
        username:
          example: smithj
          type: string
      required:
      - username
    PrincipalOut:
      allOf:
      - $ref: '#/components/schemas/Principal'
      - $ref: '#/components/schemas/UUID'
    PrincipalPagination:
      allOf:
      - $ref: '#/components/schemas/ListPagination'
      - $ref: '#/components/schemas/PrincipalPagination_allOf'
    Group:
      example:
        name: GroupA
        description: A description of GroupA
      properties:
        name:
          example: GroupA
          type: string
        description:
          example: A description of GroupA
          type: string
      required:
      - name
    AdditionalGroup:
      properties:
        name:
          example: GroupA
          type: string
        description:
          example: GroupA Description
          type: string
        uuid:
          example: 234df936-abb4-4238-a1c9-d91fc540c702
          type: string
    GroupOut:
      allOf:
      - $ref: '#/components/schemas/Group'
      - $ref: '#/components/schemas/UUID'
      - $ref: '#/components/schemas/Timestamped'
      - $ref: '#/components/schemas/GroupOut_allOf'
    GroupPrincipalIn:
      example:
        principals:
        - username: smithj
        - username: smithj
      properties:
        principals:
          items:
            $ref: '#/components/schemas/PrincipalIn'
          type: array
      required:
      - principals
    GroupRoleIn:
      example:
        roles:
        - 94846f2f-cced-474f-b7f3-47e2ec51dd11
        - 94846f2f-cced-474f-b7f3-47e2ec51dd11
      properties:
        roles:
          items:
            example: 94846f2f-cced-474f-b7f3-47e2ec51dd11
            format: uuid
            type: string
          type: array
      required:
      - roles
    GroupWithPrincipals:
      allOf:
      - $ref: '#/components/schemas/Group'
      - $ref: '#/components/schemas/UUID'
      - $ref: '#/components/schemas/Timestamped'
      - $ref: '#/components/schemas/GroupWithPrincipals_allOf'
    GroupWithPrincipalsAndRoles:
      allOf:
      - $ref: '#/components/schemas/Group'
      - $ref: '#/components/schemas/UUID'
      - $ref: '#/components/schemas/Timestamped'
      - $ref: '#/components/schemas/GroupWithPrincipalsAndRoles_allOf'
    GroupRolesPagination:
      allOf:
      - $ref: '#/components/schemas/ListPagination'
      - $ref: '#/components/schemas/inline_response_200'
    GroupPagination:
      allOf:
      - $ref: '#/components/schemas/ListPagination'
      - $ref: '#/components/schemas/GroupPagination_allOf'
    CrossAccountRequestDetail:
      $ref: '#/components/schemas/CrossAccountRequestDetailByAccount'
    CrossAccountRequestDetailByAccount:
      allOf:
      - $ref: '#/components/schemas/CrossAccountRequestWithRoles'
      - $ref: '#/components/schemas/CrossAccountRequestDetailByAccount_allOf'
    CrossAccountRequestDetailByUseId:
      allOf:
      - $ref: '#/components/schemas/CrossAccountRequestWithRoles'
      - $ref: '#/components/schemas/CrossAccountRequestDetailByUseId_allOf'
    CrossAccountRequestPagination:
      allOf:
      - $ref: '#/components/schemas/ListPagination'
      - $ref: '#/components/schemas/CrossAccountRequestPagination_allOf'
    CrossAccountRequestIn:
      example:
        end_date: 01/01/2021
        roles:
        - Role Name
        - Role Name
        target_account: "12345"
        start_date: 01/01/2021
      properties:
        target_account:
          example: "12345"
          type: string
        start_date:
          example: 01/01/2021
          type: string
        end_date:
          example: 01/01/2021
          type: string
        roles:
          items:
            example: Role Name
            type: string
          type: array
      required:
      - end_date
      - roles
      - start_date
      - target_account
    CrossAccountRequestUpdateIn:
      example:
        end_date: 01/01/2021
        roles:
        - Role Name
        - Role Name
        start_date: 01/01/2021
        status: pending
      properties:
        start_date:
          example: 01/01/2021
          type: string
        end_date:
          example: 01/01/2021
          type: string
        roles:
          items:
            example: Role Name
            type: string
          type: array
        status:
          enum:
          - pending
          - approved
          - expired
          - cancelled
          - denied
          type: string
      required:
      - end_date
      - roles
      - start_date
    CrossAccountRequestPatch:
      example:
        end_date: 01/01/2021
        roles:
        - Role Name
        - Role Name
        start_date: 01/01/2021
        status: pending
      properties:
        start_date:
          example: 01/01/2021
          type: string
        end_date:
          example: 01/01/2021
          type: string
        roles:
          items:
            example: Role Name
            type: string
          type: array
        status:
          enum:
          - pending
          - approved
          - expired
          - cancelled
          - denied
          type: string
    CrossAccountRequestByAccount:
      allOf:
      - $ref: '#/components/schemas/CrossAccountRequest'
      - $ref: '#/components/schemas/CrossAccountRequestByAccount_allOf'
    CrossAccountRequestByUserId:
      allOf:
      - $ref: '#/components/schemas/CrossAccountRequest'
      - $ref: '#/components/schemas/CrossAccountRequestByUserId_allOf'
    CrossAccountRequest:
      properties:
        request_id:
          example: 2ad8cac5-336e-44c6-9b16-15ac84224d4b
          format: uuid
          type: string
        target_account:
          example: "12345"
          type: string
        status:
          example: pending
          type: string
        created:
          example: 2019-01-21T17:32:28Z
          format: date-time
          type: string
        start_date:
          example: 2019-01-21T17:32:28Z
          format: date-time
        end_date:
          example: 2019-01-21T17:32:28Z
          format: date-time
    CrossAccountRequestWithRoles:
      properties:
        request_id:
          example: 2ad8cac5-336e-44c6-9b16-15ac84224d4b
          format: uuid
          type: string
        target_account:
          example: "12345"
          type: string
        start_date:
          example: 01/01/2021
          type: string
        end_date:
          example: 01/01/2021
          type: string
        status:
          example: pending
          type: string
        created:
          example: 2019-01-21T17:32:28Z
          format: date-time
          type: string
        roles:
          items:
            $ref: '#/components/schemas/CrossAccountRequestWithRoles_roles'
          type: array
    CrossAccountRequestOut:
      allOf:
      - $ref: '#/components/schemas/CrossAccountRequestWithRoles'
      - $ref: '#/components/schemas/CrossAccountRequestByUserId_allOf'
    ResourceDefinitionFilter:
      properties:
        key:
          example: cost-management.aws.account
          type: string
        operation:
          enum:
          - equal
          - in
          type: string
        value:
          example: "123456"
          type: string
      required:
      - key
      - operation
      - value
    ResourceDefinition:
      properties:
        attributeFilter:
          $ref: '#/components/schemas/ResourceDefinitionFilter'
      required:
      - attributeFilter
    Access:
      properties:
        permission:
          example: cost-management:*:read
          type: string
        resourceDefinitions:
          items:
            $ref: '#/components/schemas/ResourceDefinition'
          type: array
      required:
      - permission
      - resourceDefinitions
    Role:
      properties:
        name:
          example: RoleA
          type: string
        display_name:
          example: ARoleName
          type: string
        description:
          example: A description of RoleA
          type: string
      required:
      - name
    RoleIn:
      allOf:
      - $ref: '#/components/schemas/Role'
      - $ref: '#/components/schemas/RoleIn_allOf'
    RolePagination:
      allOf:
      - $ref: '#/components/schemas/ListPagination'
      - $ref: '#/components/schemas/inline_response_200'
    RolePaginationDynamic:
      allOf:
      - $ref: '#/components/schemas/ListPagination'
      - $ref: '#/components/schemas/RolePaginationDynamic_allOf'
    RoleOut:
      allOf:
      - $ref: '#/components/schemas/Role'
      - $ref: '#/components/schemas/UUID'
      - $ref: '#/components/schemas/Timestamped'
      - $ref: '#/components/schemas/RoleOut_allOf'
    RoleOutDynamic:
      allOf:
      - $ref: '#/components/schemas/Role'
      - $ref: '#/components/schemas/UUID'
      - $ref: '#/components/schemas/Timestamped'
      - $ref: '#/components/schemas/RoleOutDynamic_allOf'
    RolePatch:
      example:
        name: RoleA
        description: A description of RoleA
        display_name: ARoleName
      properties:
        name:
          example: RoleA
          type: string
        display_name:
          example: ARoleName
          type: string
        description:
          example: A description of RoleA
          type: string
    RoleWithAccess:
      allOf:
      - $ref: '#/components/schemas/RoleOut'
      - $ref: '#/components/schemas/RoleIn_allOf'
    Policy:
      properties:
        name:
          example: PolicyA
          type: string
        description:
          example: A description of PolicyA
          type: string
      required:
      - name
    PolicyIn:
      allOf:
      - $ref: '#/components/schemas/Policy'
      - $ref: '#/components/schemas/PolicyIn_allOf'
    PolicyExtended:
      allOf:
      - $ref: '#/components/schemas/Policy'
      - $ref: '#/components/schemas/UUID'
      - $ref: '#/components/schemas/Timestamped'
      - $ref: '#/components/schemas/PolicyExtended_allOf'
    PolicyPagination:
      allOf:
      - $ref: '#/components/schemas/ListPagination'
      - $ref: '#/components/schemas/PolicyPagination_allOf'
    AccessPagination:
      allOf:
      - $ref: '#/components/schemas/ListPagination'
      - $ref: '#/components/schemas/AccessPagination_allOf'
    Status:
      example:
        platform_info:
          system: Darwin
          node: node-1.example.com
          release: 17.5.0
          version: Darwin Kernel Version 17.5.0
          machine: x86_64
          processor: i386
        python_version: 3.6.1
        commit: 178d2ea
        server_address: 127.0.0.1:8000
        api_version: 1
        modules:
          coverage: 4.5.1
          coverage.version: 4.5.1
          coverage.xmlreport: 4.5.1
          cryptography: 2.0.3
          ctypes: 1.1.0
          ctypes.macholib: "1.0"
          decimal: "1.70"
          django: 1.11.5
          django.utils.six: 1.10.0
          django_filters: 1.0.4
          http.server: "0.6"
      properties:
        api_version:
          example: 1
          format: int64
          type: integer
        commit:
          example: 178d2ea
          type: string
        server_address:
          example: 127.0.0.1:8000
          type: string
        platform_info:
          example:
            system: Darwin
            node: node-1.example.com
            release: 17.5.0
            version: Darwin Kernel Version 17.5.0
            machine: x86_64
            processor: i386
          type: object
        python_version:
          example: 3.6.1
          type: string
        modules:
          example:
            coverage: 4.5.1
            coverage.version: 4.5.1
            coverage.xmlreport: 4.5.1
            cryptography: 2.0.3
            ctypes: 1.1.0
            ctypes.macholib: "1.0"
            decimal: "1.70"
            django: 1.11.5
            django.utils.six: 1.10.0
            django_filters: 1.0.4
            http.server: "0.6"
          type: object
      required:
      - api_version
    Permission:
      properties:
        application:
          example: rbac
          type: string
        resource_type:
          example: group
          type: string
        verb:
          example: read
          type: string
        permission:
          example: rbac:group:read
          type: string
        description:
          example: Describe the usage of permission.
          type: string
    PermissionPagination:
      allOf:
      - $ref: '#/components/schemas/ListPagination'
      - $ref: '#/components/schemas/PermissionPagination_allOf'
    PermissionOptionsPagination:
      allOf:
      - $ref: '#/components/schemas/ListPagination'
      - $ref: '#/components/schemas/PermissionOptionsPagination_allOf'
    inline_response_200:
      example:
        data:
        - null
        - null
      properties:
        data:
          items:
            $ref: '#/components/schemas/RoleOut'
          type: array
      required:
      - data
      type: object
    Error_errors:
      properties:
        detail:
          example: Not found.
          type: string
        status:
          example: "403"
          type: string
      type: object
    Error403_errors:
      properties:
        detail:
          example: You do not have permission to perform this action.
          type: string
        source:
          example: detail
          type: string
        status:
          example: "403"
          type: string
      type: object
    PrincipalPagination_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Principal'
          type: array
      required:
      - data
      type: object
    GroupOut_allOf:
      properties:
        principalCount:
          minimum: 0
          type: integer
        roleCount:
          minimum: 0
          type: integer
        system:
          default: false
          type: boolean
        platform_default:
          default: false
          type: boolean
    GroupWithPrincipals_allOf:
      properties:
        principals:
          items:
            $ref: '#/components/schemas/Principal'
          type: array
      required:
      - principals
      type: object
    GroupWithPrincipalsAndRoles_allOf:
      properties:
        principals:
          items:
            $ref: '#/components/schemas/Principal'
          type: array
        roles:
          items:
            $ref: '#/components/schemas/RoleOut'
          type: array
      required:
      - principals
      - roles
      type: object
    GroupPagination_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/GroupOut'
          type: array
      required:
      - data
      type: object
    CrossAccountRequestDetailByAccount_allOf:
      properties:
        first_name:
          example: first_name
          format: string
        last_name:
          example: last_name
          format: string
        email:
          example: email
          format: string
      type: object
    CrossAccountRequestDetailByUseId_allOf:
      properties:
        user_id:
          example: "1234"
          format: string
      type: object
    CrossAccountRequestPagination_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/CrossAccountRequestByAccount'
          type: array
      required:
      - data
      type: object
    CrossAccountRequestByAccount_allOf:
      properties:
        first_name:
          example: Jane
          type: string
        last_name:
          example: Doe
          type: string
        email:
          example: test@redhat.com
          type: string
      type: object
    CrossAccountRequestByUserId_allOf:
      properties:
        user_id:
          example: "1234"
          type: string
      type: object
    CrossAccountRequestWithRoles_roles:
      properties:
        display_name:
          example: display_name
          type: string
        description:
          example: description
          type: string
        permissions:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    RoleIn_allOf:
      properties:
        access:
          items:
            $ref: '#/components/schemas/Access'
          type: array
      required:
      - access
      type: object
    RolePaginationDynamic_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RoleOutDynamic'
          type: array
      required:
      - data
      type: object
    RoleOut_allOf:
      properties:
        policyCount:
          minimum: 0
          type: integer
        accessCount:
          minimum: 0
          type: integer
        applications:
          items:
            example: catalog
            type: string
          type: array
        system:
          default: false
          type: boolean
        platform_default:
          default: false
          type: boolean
    RoleOutDynamic_allOf:
      properties:
        policyCount:
          minimum: 0
          type: integer
        accessCount:
          minimum: 0
          type: integer
        applications:
          items:
            example: catalog
            type: string
          type: array
        system:
          default: false
          type: boolean
        platform_default:
          default: false
          type: boolean
        groups_in_count:
          minimum: 0
          type: integer
        groups_in:
          items:
            $ref: '#/components/schemas/AdditionalGroup'
          type: array
      required:
      - accessCount
      - applications
      - platform_default
      - policyCount
      - system
      type: object
    PolicyIn_allOf:
      properties:
        group:
          example: 83ee048e-3c1d-43ef-b945-108225ae52f4
          format: uuid
          type: string
        roles:
          items:
            example: 94846f2f-cced-474f-b7f3-47e2ec51dd11
            format: uuid
            type: string
          type: array
      required:
      - group
      - roles
      type: object
    PolicyExtended_allOf:
      properties:
        group:
          $ref: '#/components/schemas/GroupOut'
        roles:
          items:
            $ref: '#/components/schemas/RoleOut'
          type: array
      required:
      - group
      - roles
      type: object
    PolicyPagination_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/PolicyExtended'
          type: array
      required:
      - data
      type: object
    AccessPagination_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Access'
          type: array
      required:
      - data
      type: object
    PermissionPagination_allOf:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      required:
      - data
      type: object
    PermissionOptionsPagination_allOf:
      properties:
        data:
          items:
            type: string
          type: array
      required:
      - data
      type: object
  securitySchemes:
    basic_auth:
      description: The userid/password is needed when accessing this API externally
      scheme: basic
      type: http
