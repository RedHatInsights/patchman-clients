/*
 * VMaaS Webapp
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.10.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vmaas

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ExperimentalApiService ExperimentalApi service
type ExperimentalApiService service

type ApiAppRPMPkgNamesHandlerGetGetRequest struct {
	ctx _context.Context
	ApiService *ExperimentalApiService
	rpm string
}


func (r ApiAppRPMPkgNamesHandlerGetGetRequest) Execute() (RPMPkgNamesResponse, *_nethttp.Response, error) {
	return r.ApiService.AppRPMPkgNamesHandlerGetGetExecute(r)
}

/*
 * AppRPMPkgNamesHandlerGetGet Method for AppRPMPkgNamesHandlerGetGet
 * List of content sets by given rpm name.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param rpm Package name
 * @return ApiAppRPMPkgNamesHandlerGetGetRequest
 */
func (a *ExperimentalApiService) AppRPMPkgNamesHandlerGetGet(ctx _context.Context, rpm string) ApiAppRPMPkgNamesHandlerGetGetRequest {
	return ApiAppRPMPkgNamesHandlerGetGetRequest{
		ApiService: a,
		ctx: ctx,
		rpm: rpm,
	}
}

/*
 * Execute executes the request
 * @return RPMPkgNamesResponse
 */
func (a *ExperimentalApiService) AppRPMPkgNamesHandlerGetGetExecute(r ApiAppRPMPkgNamesHandlerGetGetRequest) (RPMPkgNamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RPMPkgNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalApiService.AppRPMPkgNamesHandlerGetGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/package_names/rpms/{rpm}"
	localVarPath = strings.Replace(localVarPath, "{"+"rpm"+"}", _neturl.PathEscape(parameterToString(r.rpm, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppRPMPkgNamesHandlerPostPostRequest struct {
	ctx _context.Context
	ApiService *ExperimentalApiService
	rPMPkgNamesRequest *RPMPkgNamesRequest
}

func (r ApiAppRPMPkgNamesHandlerPostPostRequest) RPMPkgNamesRequest(rPMPkgNamesRequest RPMPkgNamesRequest) ApiAppRPMPkgNamesHandlerPostPostRequest {
	r.rPMPkgNamesRequest = &rPMPkgNamesRequest
	return r
}

func (r ApiAppRPMPkgNamesHandlerPostPostRequest) Execute() (RPMPkgNamesResponse, *_nethttp.Response, error) {
	return r.ApiService.AppRPMPkgNamesHandlerPostPostExecute(r)
}

/*
 * AppRPMPkgNamesHandlerPostPost Method for AppRPMPkgNamesHandlerPostPost
 * List of content sets by given rpm name and content set.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAppRPMPkgNamesHandlerPostPostRequest
 */
func (a *ExperimentalApiService) AppRPMPkgNamesHandlerPostPost(ctx _context.Context) ApiAppRPMPkgNamesHandlerPostPostRequest {
	return ApiAppRPMPkgNamesHandlerPostPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return RPMPkgNamesResponse
 */
func (a *ExperimentalApiService) AppRPMPkgNamesHandlerPostPostExecute(r ApiAppRPMPkgNamesHandlerPostPostRequest) (RPMPkgNamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RPMPkgNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalApiService.AppRPMPkgNamesHandlerPostPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/package_names/rpms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rPMPkgNamesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppSRPMPkgNamesHandlerGetGetRequest struct {
	ctx _context.Context
	ApiService *ExperimentalApiService
	srpm string
}


func (r ApiAppSRPMPkgNamesHandlerGetGetRequest) Execute() (SRPMPkgNamesResponse, *_nethttp.Response, error) {
	return r.ApiService.AppSRPMPkgNamesHandlerGetGetExecute(r)
}

/*
 * AppSRPMPkgNamesHandlerGetGet Method for AppSRPMPkgNamesHandlerGetGet
 * List of content sets with associated rpm names by given srpm.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param srpm Source package name
 * @return ApiAppSRPMPkgNamesHandlerGetGetRequest
 */
func (a *ExperimentalApiService) AppSRPMPkgNamesHandlerGetGet(ctx _context.Context, srpm string) ApiAppSRPMPkgNamesHandlerGetGetRequest {
	return ApiAppSRPMPkgNamesHandlerGetGetRequest{
		ApiService: a,
		ctx: ctx,
		srpm: srpm,
	}
}

/*
 * Execute executes the request
 * @return SRPMPkgNamesResponse
 */
func (a *ExperimentalApiService) AppSRPMPkgNamesHandlerGetGetExecute(r ApiAppSRPMPkgNamesHandlerGetGetRequest) (SRPMPkgNamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SRPMPkgNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalApiService.AppSRPMPkgNamesHandlerGetGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/package_names/srpms/{srpm}"
	localVarPath = strings.Replace(localVarPath, "{"+"srpm"+"}", _neturl.PathEscape(parameterToString(r.srpm, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppSRPMPkgNamesHandlerPostPostRequest struct {
	ctx _context.Context
	ApiService *ExperimentalApiService
	sRPMPkgNamesRequest *SRPMPkgNamesRequest
}

func (r ApiAppSRPMPkgNamesHandlerPostPostRequest) SRPMPkgNamesRequest(sRPMPkgNamesRequest SRPMPkgNamesRequest) ApiAppSRPMPkgNamesHandlerPostPostRequest {
	r.sRPMPkgNamesRequest = &sRPMPkgNamesRequest
	return r
}

func (r ApiAppSRPMPkgNamesHandlerPostPostRequest) Execute() (SRPMPkgNamesResponse, *_nethttp.Response, error) {
	return r.ApiService.AppSRPMPkgNamesHandlerPostPostExecute(r)
}

/*
 * AppSRPMPkgNamesHandlerPostPost Method for AppSRPMPkgNamesHandlerPostPost
 * List of content sets with associated rpm names by given srpm and content set.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiAppSRPMPkgNamesHandlerPostPostRequest
 */
func (a *ExperimentalApiService) AppSRPMPkgNamesHandlerPostPost(ctx _context.Context) ApiAppSRPMPkgNamesHandlerPostPostRequest {
	return ApiAppSRPMPkgNamesHandlerPostPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return SRPMPkgNamesResponse
 */
func (a *ExperimentalApiService) AppSRPMPkgNamesHandlerPostPostExecute(r ApiAppSRPMPkgNamesHandlerPostPostRequest) (SRPMPkgNamesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SRPMPkgNamesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExperimentalApiService.AppSRPMPkgNamesHandlerPostPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/package_names/srpms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sRPMPkgNamesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
