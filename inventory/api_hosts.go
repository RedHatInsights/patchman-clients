/*
 * Insights Host Inventory REST Interface
 *
 * REST interface for the Insights Platform Host Inventory application.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inventory

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// HostsApiService HostsApi service
type HostsApiService service

type ApiApiHostDeleteByIdRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	hostIdList []string
	branchId *string
}

func (r ApiApiHostDeleteByIdRequest) BranchId(branchId string) ApiApiHostDeleteByIdRequest {
	r.branchId = &branchId
	return r
}

func (r ApiApiHostDeleteByIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ApiHostDeleteByIdExecute(r)
}

/*
 * ApiHostDeleteById Delete hosts by IDs
 * Delete hosts by IDs <br /><br /> Required permissions: inventory:hosts:write
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param hostIdList A comma separated list of host IDs.
 * @return ApiApiHostDeleteByIdRequest
 */
func (a *HostsApiService) ApiHostDeleteById(ctx _context.Context, hostIdList []string) ApiApiHostDeleteByIdRequest {
	return ApiApiHostDeleteByIdRequest{
		ApiService: a,
		ctx: ctx,
		hostIdList: hostIdList,
	}
}

/*
 * Execute executes the request
 */
func (a *HostsApiService) ApiHostDeleteByIdExecute(r ApiApiHostDeleteByIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostDeleteById")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts/{host_id_list}"
	localVarPath = strings.Replace(localVarPath, "{"+"host_id_list"+"}", _neturl.PathEscape(parameterToString(r.hostIdList, "csv")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.branchId != nil {
		localVarQueryParams.Add("branch_id", parameterToString(*r.branchId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiHostDeleteHostListRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	displayName *string
	fqdn *string
	hostnameOrId *string
	insightsId *string
	providerId *string
	providerType *string
	registeredWith *string
	staleness *[]string
	tags *[]string
	filter *map[string]map[string]interface{}
}

func (r ApiApiHostDeleteHostListRequest) DisplayName(displayName string) ApiApiHostDeleteHostListRequest {
	r.displayName = &displayName
	return r
}
func (r ApiApiHostDeleteHostListRequest) Fqdn(fqdn string) ApiApiHostDeleteHostListRequest {
	r.fqdn = &fqdn
	return r
}
func (r ApiApiHostDeleteHostListRequest) HostnameOrId(hostnameOrId string) ApiApiHostDeleteHostListRequest {
	r.hostnameOrId = &hostnameOrId
	return r
}
func (r ApiApiHostDeleteHostListRequest) InsightsId(insightsId string) ApiApiHostDeleteHostListRequest {
	r.insightsId = &insightsId
	return r
}
func (r ApiApiHostDeleteHostListRequest) ProviderId(providerId string) ApiApiHostDeleteHostListRequest {
	r.providerId = &providerId
	return r
}
func (r ApiApiHostDeleteHostListRequest) ProviderType(providerType string) ApiApiHostDeleteHostListRequest {
	r.providerType = &providerType
	return r
}
func (r ApiApiHostDeleteHostListRequest) RegisteredWith(registeredWith string) ApiApiHostDeleteHostListRequest {
	r.registeredWith = &registeredWith
	return r
}
func (r ApiApiHostDeleteHostListRequest) Staleness(staleness []string) ApiApiHostDeleteHostListRequest {
	r.staleness = &staleness
	return r
}
func (r ApiApiHostDeleteHostListRequest) Tags(tags []string) ApiApiHostDeleteHostListRequest {
	r.tags = &tags
	return r
}
func (r ApiApiHostDeleteHostListRequest) Filter(filter map[string]map[string]interface{}) ApiApiHostDeleteHostListRequest {
	r.filter = &filter
	return r
}

func (r ApiApiHostDeleteHostListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ApiHostDeleteHostListExecute(r)
}

/*
 * ApiHostDeleteHostList Delete the entire list of hosts filtered by the given parameters
 * Delete the entire list of hosts filtered by the given parameters. <br /><br /> Required permissions: inventory:hosts:write
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiHostDeleteHostListRequest
 */
func (a *HostsApiService) ApiHostDeleteHostList(ctx _context.Context) ApiApiHostDeleteHostListRequest {
	return ApiApiHostDeleteHostListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *HostsApiService) ApiHostDeleteHostListExecute(r ApiApiHostDeleteHostListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostDeleteHostList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.displayName != nil {
		localVarQueryParams.Add("display_name", parameterToString(*r.displayName, ""))
	}
	if r.fqdn != nil {
		localVarQueryParams.Add("fqdn", parameterToString(*r.fqdn, ""))
	}
	if r.hostnameOrId != nil {
		localVarQueryParams.Add("hostname_or_id", parameterToString(*r.hostnameOrId, ""))
	}
	if r.insightsId != nil {
		localVarQueryParams.Add("insights_id", parameterToString(*r.insightsId, ""))
	}
	if r.providerId != nil {
		localVarQueryParams.Add("provider_id", parameterToString(*r.providerId, ""))
	}
	if r.providerType != nil {
		localVarQueryParams.Add("provider_type", parameterToString(*r.providerType, ""))
	}
	if r.registeredWith != nil {
		localVarQueryParams.Add("registered_with", parameterToString(*r.registeredWith, ""))
	}
	if r.staleness != nil {
		t := *r.staleness
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("staleness", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("staleness", parameterToString(t, "multi"))
		}
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiHostGetHostByIdRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	hostIdList []string
	branchId *string
	perPage *int32
	page *int32
	orderBy *string
	orderHow *string
}

func (r ApiApiHostGetHostByIdRequest) BranchId(branchId string) ApiApiHostGetHostByIdRequest {
	r.branchId = &branchId
	return r
}
func (r ApiApiHostGetHostByIdRequest) PerPage(perPage int32) ApiApiHostGetHostByIdRequest {
	r.perPage = &perPage
	return r
}
func (r ApiApiHostGetHostByIdRequest) Page(page int32) ApiApiHostGetHostByIdRequest {
	r.page = &page
	return r
}
func (r ApiApiHostGetHostByIdRequest) OrderBy(orderBy string) ApiApiHostGetHostByIdRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiApiHostGetHostByIdRequest) OrderHow(orderHow string) ApiApiHostGetHostByIdRequest {
	r.orderHow = &orderHow
	return r
}

func (r ApiApiHostGetHostByIdRequest) Execute() (HostQueryOutput, *_nethttp.Response, error) {
	return r.ApiService.ApiHostGetHostByIdExecute(r)
}

/*
 * ApiHostGetHostById Find hosts by their IDs
 * Find one or more hosts by their ID. <br /><br /> Required permissions: inventory:hosts:read
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param hostIdList A comma separated list of host IDs.
 * @return ApiApiHostGetHostByIdRequest
 */
func (a *HostsApiService) ApiHostGetHostById(ctx _context.Context, hostIdList []string) ApiApiHostGetHostByIdRequest {
	return ApiApiHostGetHostByIdRequest{
		ApiService: a,
		ctx: ctx,
		hostIdList: hostIdList,
	}
}

/*
 * Execute executes the request
 * @return HostQueryOutput
 */
func (a *HostsApiService) ApiHostGetHostByIdExecute(r ApiApiHostGetHostByIdRequest) (HostQueryOutput, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  HostQueryOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostGetHostById")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts/{host_id_list}"
	localVarPath = strings.Replace(localVarPath, "{"+"host_id_list"+"}", _neturl.PathEscape(parameterToString(r.hostIdList, "csv")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.branchId != nil {
		localVarQueryParams.Add("branch_id", parameterToString(*r.branchId, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.orderHow != nil {
		localVarQueryParams.Add("order_how", parameterToString(*r.orderHow, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiHostGetHostListRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	displayName *string
	fqdn *string
	hostnameOrId *string
	insightsId *string
	providerId *string
	providerType *string
	branchId *string
	perPage *int32
	page *int32
	orderBy *string
	orderHow *string
	staleness *[]string
	tags *[]string
	registeredWith *string
	filter *map[string]map[string]interface{}
	fields *map[string]map[string]interface{}
}

func (r ApiApiHostGetHostListRequest) DisplayName(displayName string) ApiApiHostGetHostListRequest {
	r.displayName = &displayName
	return r
}
func (r ApiApiHostGetHostListRequest) Fqdn(fqdn string) ApiApiHostGetHostListRequest {
	r.fqdn = &fqdn
	return r
}
func (r ApiApiHostGetHostListRequest) HostnameOrId(hostnameOrId string) ApiApiHostGetHostListRequest {
	r.hostnameOrId = &hostnameOrId
	return r
}
func (r ApiApiHostGetHostListRequest) InsightsId(insightsId string) ApiApiHostGetHostListRequest {
	r.insightsId = &insightsId
	return r
}
func (r ApiApiHostGetHostListRequest) ProviderId(providerId string) ApiApiHostGetHostListRequest {
	r.providerId = &providerId
	return r
}
func (r ApiApiHostGetHostListRequest) ProviderType(providerType string) ApiApiHostGetHostListRequest {
	r.providerType = &providerType
	return r
}
func (r ApiApiHostGetHostListRequest) BranchId(branchId string) ApiApiHostGetHostListRequest {
	r.branchId = &branchId
	return r
}
func (r ApiApiHostGetHostListRequest) PerPage(perPage int32) ApiApiHostGetHostListRequest {
	r.perPage = &perPage
	return r
}
func (r ApiApiHostGetHostListRequest) Page(page int32) ApiApiHostGetHostListRequest {
	r.page = &page
	return r
}
func (r ApiApiHostGetHostListRequest) OrderBy(orderBy string) ApiApiHostGetHostListRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiApiHostGetHostListRequest) OrderHow(orderHow string) ApiApiHostGetHostListRequest {
	r.orderHow = &orderHow
	return r
}
func (r ApiApiHostGetHostListRequest) Staleness(staleness []string) ApiApiHostGetHostListRequest {
	r.staleness = &staleness
	return r
}
func (r ApiApiHostGetHostListRequest) Tags(tags []string) ApiApiHostGetHostListRequest {
	r.tags = &tags
	return r
}
func (r ApiApiHostGetHostListRequest) RegisteredWith(registeredWith string) ApiApiHostGetHostListRequest {
	r.registeredWith = &registeredWith
	return r
}
func (r ApiApiHostGetHostListRequest) Filter(filter map[string]map[string]interface{}) ApiApiHostGetHostListRequest {
	r.filter = &filter
	return r
}
func (r ApiApiHostGetHostListRequest) Fields(fields map[string]map[string]interface{}) ApiApiHostGetHostListRequest {
	r.fields = &fields
	return r
}

func (r ApiApiHostGetHostListRequest) Execute() (HostQueryOutput, *_nethttp.Response, error) {
	return r.ApiService.ApiHostGetHostListExecute(r)
}

/*
 * ApiHostGetHostList Read the entire list of hosts
 * Read the entire list of all hosts available to the account. <br /><br /> Required permissions: inventory:hosts:read
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiHostGetHostListRequest
 */
func (a *HostsApiService) ApiHostGetHostList(ctx _context.Context) ApiApiHostGetHostListRequest {
	return ApiApiHostGetHostListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return HostQueryOutput
 */
func (a *HostsApiService) ApiHostGetHostListExecute(r ApiApiHostGetHostListRequest) (HostQueryOutput, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  HostQueryOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostGetHostList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.displayName != nil {
		localVarQueryParams.Add("display_name", parameterToString(*r.displayName, ""))
	}
	if r.fqdn != nil {
		localVarQueryParams.Add("fqdn", parameterToString(*r.fqdn, ""))
	}
	if r.hostnameOrId != nil {
		localVarQueryParams.Add("hostname_or_id", parameterToString(*r.hostnameOrId, ""))
	}
	if r.insightsId != nil {
		localVarQueryParams.Add("insights_id", parameterToString(*r.insightsId, ""))
	}
	if r.providerId != nil {
		localVarQueryParams.Add("provider_id", parameterToString(*r.providerId, ""))
	}
	if r.providerType != nil {
		localVarQueryParams.Add("provider_type", parameterToString(*r.providerType, ""))
	}
	if r.branchId != nil {
		localVarQueryParams.Add("branch_id", parameterToString(*r.branchId, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.orderHow != nil {
		localVarQueryParams.Add("order_how", parameterToString(*r.orderHow, ""))
	}
	if r.staleness != nil {
		t := *r.staleness
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("staleness", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("staleness", parameterToString(t, "multi"))
		}
	}
	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	if r.registeredWith != nil {
		localVarQueryParams.Add("registered_with", parameterToString(*r.registeredWith, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiHostGetHostSystemProfileByIdRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	hostIdList []string
	perPage *int32
	page *int32
	orderBy *string
	orderHow *string
	branchId *string
	fields *map[string]map[string]interface{}
}

func (r ApiApiHostGetHostSystemProfileByIdRequest) PerPage(perPage int32) ApiApiHostGetHostSystemProfileByIdRequest {
	r.perPage = &perPage
	return r
}
func (r ApiApiHostGetHostSystemProfileByIdRequest) Page(page int32) ApiApiHostGetHostSystemProfileByIdRequest {
	r.page = &page
	return r
}
func (r ApiApiHostGetHostSystemProfileByIdRequest) OrderBy(orderBy string) ApiApiHostGetHostSystemProfileByIdRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiApiHostGetHostSystemProfileByIdRequest) OrderHow(orderHow string) ApiApiHostGetHostSystemProfileByIdRequest {
	r.orderHow = &orderHow
	return r
}
func (r ApiApiHostGetHostSystemProfileByIdRequest) BranchId(branchId string) ApiApiHostGetHostSystemProfileByIdRequest {
	r.branchId = &branchId
	return r
}
func (r ApiApiHostGetHostSystemProfileByIdRequest) Fields(fields map[string]map[string]interface{}) ApiApiHostGetHostSystemProfileByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiApiHostGetHostSystemProfileByIdRequest) Execute() (SystemProfileByHostOut, *_nethttp.Response, error) {
	return r.ApiService.ApiHostGetHostSystemProfileByIdExecute(r)
}

/*
 * ApiHostGetHostSystemProfileById Return one or more hosts system profile
 * Find one or more hosts by their ID and return the id and system profile <br /><br /> Required permissions: inventory:hosts:read
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param hostIdList A comma separated list of host IDs.
 * @return ApiApiHostGetHostSystemProfileByIdRequest
 */
func (a *HostsApiService) ApiHostGetHostSystemProfileById(ctx _context.Context, hostIdList []string) ApiApiHostGetHostSystemProfileByIdRequest {
	return ApiApiHostGetHostSystemProfileByIdRequest{
		ApiService: a,
		ctx: ctx,
		hostIdList: hostIdList,
	}
}

/*
 * Execute executes the request
 * @return SystemProfileByHostOut
 */
func (a *HostsApiService) ApiHostGetHostSystemProfileByIdExecute(r ApiApiHostGetHostSystemProfileByIdRequest) (SystemProfileByHostOut, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SystemProfileByHostOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostGetHostSystemProfileById")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts/{host_id_list}/system_profile"
	localVarPath = strings.Replace(localVarPath, "{"+"host_id_list"+"}", _neturl.PathEscape(parameterToString(r.hostIdList, "csv")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.orderHow != nil {
		localVarQueryParams.Add("order_how", parameterToString(*r.orderHow, ""))
	}
	if r.branchId != nil {
		localVarQueryParams.Add("branch_id", parameterToString(*r.branchId, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiHostGetHostTagCountRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	hostIdList []string
	perPage *int32
	page *int32
	orderBy *string
	orderHow *string
}

func (r ApiApiHostGetHostTagCountRequest) PerPage(perPage int32) ApiApiHostGetHostTagCountRequest {
	r.perPage = &perPage
	return r
}
func (r ApiApiHostGetHostTagCountRequest) Page(page int32) ApiApiHostGetHostTagCountRequest {
	r.page = &page
	return r
}
func (r ApiApiHostGetHostTagCountRequest) OrderBy(orderBy string) ApiApiHostGetHostTagCountRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiApiHostGetHostTagCountRequest) OrderHow(orderHow string) ApiApiHostGetHostTagCountRequest {
	r.orderHow = &orderHow
	return r
}

func (r ApiApiHostGetHostTagCountRequest) Execute() (TagCountOut, *_nethttp.Response, error) {
	return r.ApiService.ApiHostGetHostTagCountExecute(r)
}

/*
 * ApiHostGetHostTagCount Get the number of tags on a host
 * Get the number of tags on a host <br /><br /> Required permissions: inventory:hosts:read
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param hostIdList A comma separated list of host IDs.
 * @return ApiApiHostGetHostTagCountRequest
 */
func (a *HostsApiService) ApiHostGetHostTagCount(ctx _context.Context, hostIdList []string) ApiApiHostGetHostTagCountRequest {
	return ApiApiHostGetHostTagCountRequest{
		ApiService: a,
		ctx: ctx,
		hostIdList: hostIdList,
	}
}

/*
 * Execute executes the request
 * @return TagCountOut
 */
func (a *HostsApiService) ApiHostGetHostTagCountExecute(r ApiApiHostGetHostTagCountRequest) (TagCountOut, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TagCountOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostGetHostTagCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts/{host_id_list}/tags/count"
	localVarPath = strings.Replace(localVarPath, "{"+"host_id_list"+"}", _neturl.PathEscape(parameterToString(r.hostIdList, "csv")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.orderHow != nil {
		localVarQueryParams.Add("order_how", parameterToString(*r.orderHow, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiHostGetHostTagsRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	hostIdList []string
	perPage *int32
	page *int32
	orderBy *string
	orderHow *string
	search *string
}

func (r ApiApiHostGetHostTagsRequest) PerPage(perPage int32) ApiApiHostGetHostTagsRequest {
	r.perPage = &perPage
	return r
}
func (r ApiApiHostGetHostTagsRequest) Page(page int32) ApiApiHostGetHostTagsRequest {
	r.page = &page
	return r
}
func (r ApiApiHostGetHostTagsRequest) OrderBy(orderBy string) ApiApiHostGetHostTagsRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiApiHostGetHostTagsRequest) OrderHow(orderHow string) ApiApiHostGetHostTagsRequest {
	r.orderHow = &orderHow
	return r
}
func (r ApiApiHostGetHostTagsRequest) Search(search string) ApiApiHostGetHostTagsRequest {
	r.search = &search
	return r
}

func (r ApiApiHostGetHostTagsRequest) Execute() (TagsOut, *_nethttp.Response, error) {
	return r.ApiService.ApiHostGetHostTagsExecute(r)
}

/*
 * ApiHostGetHostTags Get the tags on a host
 * Get the tags on a host <br /><br /> Required permissions: inventory:hosts:read
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param hostIdList A comma separated list of host IDs.
 * @return ApiApiHostGetHostTagsRequest
 */
func (a *HostsApiService) ApiHostGetHostTags(ctx _context.Context, hostIdList []string) ApiApiHostGetHostTagsRequest {
	return ApiApiHostGetHostTagsRequest{
		ApiService: a,
		ctx: ctx,
		hostIdList: hostIdList,
	}
}

/*
 * Execute executes the request
 * @return TagsOut
 */
func (a *HostsApiService) ApiHostGetHostTagsExecute(r ApiApiHostGetHostTagsRequest) (TagsOut, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TagsOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostGetHostTags")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts/{host_id_list}/tags"
	localVarPath = strings.Replace(localVarPath, "{"+"host_id_list"+"}", _neturl.PathEscape(parameterToString(r.hostIdList, "csv")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.orderHow != nil {
		localVarQueryParams.Add("order_how", parameterToString(*r.orderHow, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiHostHostCheckinRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	createCheckIn *CreateCheckIn
}

func (r ApiApiHostHostCheckinRequest) CreateCheckIn(createCheckIn CreateCheckIn) ApiApiHostHostCheckinRequest {
	r.createCheckIn = &createCheckIn
	return r
}

func (r ApiApiHostHostCheckinRequest) Execute() (CreateHostOut, *_nethttp.Response, error) {
	return r.ApiService.ApiHostHostCheckinExecute(r)
}

/*
 * ApiHostHostCheckin Update staleness timestamps for a host matching the provided facts
 * Finds a host and updates its staleness timestamps. It uses the supplied canonical facts to determine which host to update. By default, the staleness timestamp is set to 1 hour from when the request is received; however, this can be overridden by supplying the interval. <br /><br /> Required permissions: inventory:hosts:write
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiApiHostHostCheckinRequest
 */
func (a *HostsApiService) ApiHostHostCheckin(ctx _context.Context) ApiApiHostHostCheckinRequest {
	return ApiApiHostHostCheckinRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return CreateHostOut
 */
func (a *HostsApiService) ApiHostHostCheckinExecute(r ApiApiHostHostCheckinRequest) (CreateHostOut, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateHostOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostHostCheckin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts/checkin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.createCheckIn == nil {
		return localVarReturnValue, nil, reportError("createCheckIn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createCheckIn
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiHostMergeFactsRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	hostIdList []string
	namespace string
	body *map[string]interface{}
	branchId *string
}

func (r ApiApiHostMergeFactsRequest) Body(body map[string]interface{}) ApiApiHostMergeFactsRequest {
	r.body = &body
	return r
}
func (r ApiApiHostMergeFactsRequest) BranchId(branchId string) ApiApiHostMergeFactsRequest {
	r.branchId = &branchId
	return r
}

func (r ApiApiHostMergeFactsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ApiHostMergeFactsExecute(r)
}

/*
 * ApiHostMergeFacts Merge facts under a namespace
 * Merge one or multiple hosts facts under a namespace. <br /><br /> Required permissions: inventory:hosts:write
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param hostIdList A comma separated list of host IDs.
 * @param namespace A namespace of the merged facts.
 * @return ApiApiHostMergeFactsRequest
 */
func (a *HostsApiService) ApiHostMergeFacts(ctx _context.Context, hostIdList []string, namespace string) ApiApiHostMergeFactsRequest {
	return ApiApiHostMergeFactsRequest{
		ApiService: a,
		ctx: ctx,
		hostIdList: hostIdList,
		namespace: namespace,
	}
}

/*
 * Execute executes the request
 */
func (a *HostsApiService) ApiHostMergeFactsExecute(r ApiApiHostMergeFactsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostMergeFacts")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts/{host_id_list}/facts/{namespace}"
	localVarPath = strings.Replace(localVarPath, "{"+"host_id_list"+"}", _neturl.PathEscape(parameterToString(r.hostIdList, "csv")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", _neturl.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	if r.branchId != nil {
		localVarQueryParams.Add("branch_id", parameterToString(*r.branchId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiHostPatchByIdRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	hostIdList []string
	patchHostIn *PatchHostIn
	branchId *string
}

func (r ApiApiHostPatchByIdRequest) PatchHostIn(patchHostIn PatchHostIn) ApiApiHostPatchByIdRequest {
	r.patchHostIn = &patchHostIn
	return r
}
func (r ApiApiHostPatchByIdRequest) BranchId(branchId string) ApiApiHostPatchByIdRequest {
	r.branchId = &branchId
	return r
}

func (r ApiApiHostPatchByIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ApiHostPatchByIdExecute(r)
}

/*
 * ApiHostPatchById Update a host
 * Update a host <br /><br /> Required permissions: inventory:hosts:write
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param hostIdList A comma separated list of host IDs.
 * @return ApiApiHostPatchByIdRequest
 */
func (a *HostsApiService) ApiHostPatchById(ctx _context.Context, hostIdList []string) ApiApiHostPatchByIdRequest {
	return ApiApiHostPatchByIdRequest{
		ApiService: a,
		ctx: ctx,
		hostIdList: hostIdList,
	}
}

/*
 * Execute executes the request
 */
func (a *HostsApiService) ApiHostPatchByIdExecute(r ApiApiHostPatchByIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostPatchById")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts/{host_id_list}"
	localVarPath = strings.Replace(localVarPath, "{"+"host_id_list"+"}", _neturl.PathEscape(parameterToString(r.hostIdList, "csv")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.patchHostIn == nil {
		return nil, reportError("patchHostIn is required and must be specified")
	}

	if r.branchId != nil {
		localVarQueryParams.Add("branch_id", parameterToString(*r.branchId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchHostIn
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiHostReplaceFactsRequest struct {
	ctx _context.Context
	ApiService *HostsApiService
	hostIdList []string
	namespace string
	body *map[string]interface{}
	branchId *string
}

func (r ApiApiHostReplaceFactsRequest) Body(body map[string]interface{}) ApiApiHostReplaceFactsRequest {
	r.body = &body
	return r
}
func (r ApiApiHostReplaceFactsRequest) BranchId(branchId string) ApiApiHostReplaceFactsRequest {
	r.branchId = &branchId
	return r
}

func (r ApiApiHostReplaceFactsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ApiHostReplaceFactsExecute(r)
}

/*
 * ApiHostReplaceFacts Replace facts under a namespace
 * Replace facts under a namespace <br /><br /> Required permissions: inventory:hosts:write
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param hostIdList A comma separated list of host IDs.
 * @param namespace A namespace of the merged facts.
 * @return ApiApiHostReplaceFactsRequest
 */
func (a *HostsApiService) ApiHostReplaceFacts(ctx _context.Context, hostIdList []string, namespace string) ApiApiHostReplaceFactsRequest {
	return ApiApiHostReplaceFactsRequest{
		ApiService: a,
		ctx: ctx,
		hostIdList: hostIdList,
		namespace: namespace,
	}
}

/*
 * Execute executes the request
 */
func (a *HostsApiService) ApiHostReplaceFactsExecute(r ApiApiHostReplaceFactsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HostsApiService.ApiHostReplaceFacts")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hosts/{host_id_list}/facts/{namespace}"
	localVarPath = strings.Replace(localVarPath, "{"+"host_id_list"+"}", _neturl.PathEscape(parameterToString(r.hostIdList, "csv")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", _neturl.PathEscape(parameterToString(r.namespace, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	if r.branchId != nil {
		localVarQueryParams.Add("branch_id", parameterToString(*r.branchId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-rh-identity"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
