/*
 * Insights Host Inventory REST Interface
 *
 * REST interface for the Insights Platform Host Inventory application.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inventory

import (
	"encoding/json"
)

// TagsOut struct for TagsOut
type TagsOut struct {
	// The number of items on the current page
	Count int32 `json:"count"`
	// The page number
	Page int32 `json:"page"`
	// The number of items to return per page
	PerPage int32 `json:"per_page"`
	// Total number of items
	Total int32 `json:"total"`
	// The list of tags on the systems
	Results *map[string][]StructuredTag `json:"results,omitempty"`
}

// NewTagsOut instantiates a new TagsOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagsOut(count int32, page int32, perPage int32, total int32, ) *TagsOut {
	this := TagsOut{}
	this.Count = count
	this.Page = page
	this.PerPage = perPage
	this.Total = total
	return &this
}

// NewTagsOutWithDefaults instantiates a new TagsOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagsOutWithDefaults() *TagsOut {
	this := TagsOut{}
	return &this
}

// GetCount returns the Count field value
func (o *TagsOut) GetCount() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TagsOut) GetCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TagsOut) SetCount(v int32) {
	o.Count = v
}

// GetPage returns the Page field value
func (o *TagsOut) GetPage() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *TagsOut) GetPageOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *TagsOut) SetPage(v int32) {
	o.Page = v
}

// GetPerPage returns the PerPage field value
func (o *TagsOut) GetPerPage() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.PerPage
}

// GetPerPageOk returns a tuple with the PerPage field value
// and a boolean to check if the value has been set.
func (o *TagsOut) GetPerPageOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PerPage, true
}

// SetPerPage sets field value
func (o *TagsOut) SetPerPage(v int32) {
	o.PerPage = v
}

// GetTotal returns the Total field value
func (o *TagsOut) GetTotal() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *TagsOut) GetTotalOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *TagsOut) SetTotal(v int32) {
	o.Total = v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *TagsOut) GetResults() map[string][]StructuredTag {
	if o == nil || o.Results == nil {
		var ret map[string][]StructuredTag
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagsOut) GetResultsOk() (*map[string][]StructuredTag, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *TagsOut) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given map[string][]StructuredTag and assigns it to the Results field.
func (o *TagsOut) SetResults(v map[string][]StructuredTag) {
	o.Results = &v
}

func (o TagsOut) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["page"] = o.Page
	}
	if true {
		toSerialize["per_page"] = o.PerPage
	}
	if true {
		toSerialize["total"] = o.Total
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableTagsOut struct {
	value *TagsOut
	isSet bool
}

func (v NullableTagsOut) Get() *TagsOut {
	return v.value
}

func (v *NullableTagsOut) Set(val *TagsOut) {
	v.value = val
	v.isSet = true
}

func (v NullableTagsOut) IsSet() bool {
	return v.isSet
}

func (v *NullableTagsOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagsOut(val *TagsOut) *NullableTagsOut {
	return &NullableTagsOut{value: val, isSet: true}
}

func (v NullableTagsOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagsOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


